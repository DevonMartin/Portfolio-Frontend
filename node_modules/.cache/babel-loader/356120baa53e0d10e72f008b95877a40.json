{"ast":null,"code":"// eslint-lint-disable-next-line @typescript-eslint/naming-convention\nexport class HTTPError extends Error {\n  constructor(response, request, options) {\n    const code = response.status || response.status === 0 ? response.status : '';\n    const title = response.statusText || '';\n    const status = `${code} ${title}`.trim();\n    const reason = status ? `status code ${status}` : 'an unknown error';\n    super(`Request failed with ${reason}`);\n    Object.defineProperty(this, \"response\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"request\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.name = 'HTTPError';\n    this.response = response;\n    this.request = request;\n    this.options = options;\n  }\n}","map":{"version":3,"mappings":"AAEA;AACA,OAAM,MAAOA,SAAU,SAAQC,KAAK;EAKnCC,YAAYC,QAAkB,EAAEC,OAAgB,EAAEC,OAA0B;IAC3E,MAAMC,IAAI,GAAIH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACI,MAAM,KAAK,CAAC,GAAIJ,QAAQ,CAACI,MAAM,GAAG,EAAE;IAC9E,MAAMC,KAAK,GAAGL,QAAQ,CAACM,UAAU,IAAI,EAAE;IACvC,MAAMF,MAAM,GAAG,GAAGD,IAAI,IAAIE,KAAK,EAAE,CAACE,IAAI,EAAE;IACxC,MAAMC,MAAM,GAAGJ,MAAM,GAAG,eAAeA,MAAM,EAAE,GAAG,kBAAkB;IAEpE,KAAK,CAAC,uBAAuBI,MAAM,EAAE,CAAC;IAVvCC;;;;;;IACAA;;;;;;IACAA;;;;;;IAUC,IAAI,CAACC,IAAI,GAAG,WAAW;IACvB,IAAI,CAACV,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACvB","names":["HTTPError","Error","constructor","response","request","options","code","status","title","statusText","trim","reason","Object","name"],"sources":["/Users/devonmartin/Hacker Shit/VSCode Projects/Personal Projects/Portfolio Remade/client/node_modules/ky/source/errors/HTTPError.ts"],"sourcesContent":["import type {NormalizedOptions} from '../types/options.js';\n\n// eslint-lint-disable-next-line @typescript-eslint/naming-convention\nexport class HTTPError extends Error {\n\tpublic response: Response;\n\tpublic request: Request;\n\tpublic options: NormalizedOptions;\n\n\tconstructor(response: Response, request: Request, options: NormalizedOptions) {\n\t\tconst code = (response.status || response.status === 0) ? response.status : '';\n\t\tconst title = response.statusText || '';\n\t\tconst status = `${code} ${title}`.trim();\n\t\tconst reason = status ? `status code ${status}` : 'an unknown error';\n\n\t\tsuper(`Request failed with ${reason}`);\n\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.options = options;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}