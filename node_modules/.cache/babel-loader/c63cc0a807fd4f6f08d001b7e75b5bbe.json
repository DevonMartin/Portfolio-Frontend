{"ast":null,"code":"export const supportsRequestStreams = (() => {\n  let duplexAccessed = false;\n  let hasContentType = false;\n  const supportsReadableStream = typeof globalThis.ReadableStream === 'function';\n  if (supportsReadableStream) {\n    hasContentType = new globalThis.Request('https://a.com', {\n      body: new globalThis.ReadableStream(),\n      method: 'POST',\n      // @ts-expect-error - Types are outdated.\n      get duplex() {\n        duplexAccessed = true;\n        return 'half';\n      }\n    }).headers.has('Content-Type');\n  }\n  return duplexAccessed && !hasContentType;\n})();\nexport const supportsAbortController = typeof globalThis.AbortController === 'function';\nexport const supportsResponseStreams = typeof globalThis.ReadableStream === 'function';\nexport const supportsFormData = typeof globalThis.FormData === 'function';\nexport const requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];\nconst validate = () => undefined;\nvalidate();\nexport const responseTypes = {\n  json: 'application/json',\n  text: 'text/*',\n  formData: 'multipart/form-data',\n  arrayBuffer: '*/*',\n  blob: '*/*'\n};\n// The maximum value of a 32bit int (see issue #117)\nexport const maxSafeTimeout = 2147483647;\nexport const stop = Symbol('stop');","map":{"version":3,"mappings":"AAGA,OAAO,MAAMA,sBAAsB,GAAG,CAAC,MAAK;EAC3C,IAAIC,cAAc,GAAG,KAAK;EAC1B,IAAIC,cAAc,GAAG,KAAK;EAC1B,MAAMC,sBAAsB,GAAG,OAAOC,UAAU,CAACC,cAAc,KAAK,UAAU;EAE9E,IAAIF,sBAAsB,EAAE;IAC3BD,cAAc,GAAG,IAAIE,UAAU,CAACE,OAAO,CAAC,eAAe,EAAE;MACxDC,IAAI,EAAE,IAAIH,UAAU,CAACC,cAAc,EAAE;MACrCG,MAAM,EAAE,MAAM;MACd;MACA,IAAIC,MAAM;QACTR,cAAc,GAAG,IAAI;QACrB,OAAO,MAAM;MACd;KACA,CAAC,CAACS,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;EAG/B,OAAOV,cAAc,IAAI,CAACC,cAAc;AACzC,CAAC,GAAG;AAEJ,OAAO,MAAMU,uBAAuB,GAAG,OAAOR,UAAU,CAACS,eAAe,KAAK,UAAU;AACvF,OAAO,MAAMC,uBAAuB,GAAG,OAAOV,UAAU,CAACC,cAAc,KAAK,UAAU;AACtF,OAAO,MAAMU,gBAAgB,GAAG,OAAOX,UAAU,CAACY,QAAQ,KAAK,UAAU;AAEzE,OAAO,MAAMC,cAAc,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAU;AAExF,MAAMC,QAAQ,GAAG,MAA6BC,SAAyB;AACvED,QAAQ,EAEJ;AAEJ,OAAO,MAAME,aAAa,GAAG;EAC5BC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,KAAK;EAClBC,IAAI,EAAE;CACG;AAEV;AACA,OAAO,MAAMC,cAAc,GAAG,UAAa;AAE3C,OAAO,MAAMC,IAAI,GAAGC,MAAM,CAAC,MAAM,CAAC","names":["supportsRequestStreams","duplexAccessed","hasContentType","supportsReadableStream","globalThis","ReadableStream","Request","body","method","duplex","headers","has","supportsAbortController","AbortController","supportsResponseStreams","supportsFormData","FormData","requestMethods","validate","undefined","responseTypes","json","text","formData","arrayBuffer","blob","maxSafeTimeout","stop","Symbol"],"sources":["/Users/devonmartin/Hacker Shit/VSCode Projects/Personal Projects/Portfolio Remade/client/node_modules/ky/source/core/constants.ts"],"sourcesContent":["import type {Expect, Equal} from '@type-challenges/utils';\nimport {HttpMethod} from '../types/options.js';\n\nexport const supportsRequestStreams = (() => {\n\tlet duplexAccessed = false;\n\tlet hasContentType = false;\n\tconst supportsReadableStream = typeof globalThis.ReadableStream === 'function';\n\n\tif (supportsReadableStream) {\n\t\thasContentType = new globalThis.Request('https://a.com', {\n\t\t\tbody: new globalThis.ReadableStream(),\n\t\t\tmethod: 'POST',\n\t\t\t// @ts-expect-error - Types are outdated.\n\t\t\tget duplex() {\n\t\t\t\tduplexAccessed = true;\n\t\t\t\treturn 'half';\n\t\t\t},\n\t\t}).headers.has('Content-Type');\n\t}\n\n\treturn duplexAccessed && !hasContentType;\n})();\n\nexport const supportsAbortController = typeof globalThis.AbortController === 'function';\nexport const supportsResponseStreams = typeof globalThis.ReadableStream === 'function';\nexport const supportsFormData = typeof globalThis.FormData === 'function';\n\nexport const requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'] as const;\n\nconst validate = <T extends Array<true>>() => undefined as unknown as T;\nvalidate<[\n\tExpect<Equal<typeof requestMethods[number], HttpMethod>>,\n]>();\n\nexport const responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*',\n} as const;\n\n// The maximum value of a 32bit int (see issue #117)\nexport const maxSafeTimeout = 2_147_483_647;\n\nexport const stop = Symbol('stop');\n"]},"metadata":{},"sourceType":"module"}