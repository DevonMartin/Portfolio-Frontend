{"ast":null,"code":"import { requestMethods } from '../core/constants.js';\nexport const normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nconst retryAfterStatusCodes = [413, 429, 503];\nconst defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes,\n  maxRetryAfter: Number.POSITIVE_INFINITY\n};\nexport const normalizeRetryOptions = function () {\n  let retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof retry === 'number') {\n    return {\n      ...defaultRetryOptions,\n      limit: retry\n    };\n  }\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n  return {\n    ...defaultRetryOptions,\n    ...retry,\n    afterStatusCodes: retryAfterStatusCodes\n  };\n};","map":{"version":3,"mappings":"AAAA,SAAQA,cAAc,QAAO,sBAAsB;AAInD,OAAO,MAAMC,sBAAsB,GAAIC,KAAa,IACnDF,cAAc,CAACG,QAAQ,CAACD,KAAmB,CAAC,GAAGA,KAAK,CAACE,WAAW,EAAE,GAAGF,KAAK;AAE3E,MAAMG,YAAY,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;AAEzE,MAAMC,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE5D,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE7C,MAAMC,mBAAmB,GAA2B;EACnDC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAEL,YAAY;EACrBM,WAAW,EAAEL,gBAAgB;EAC7BM,gBAAgB,EAAEL,qBAAqB;EACvCM,aAAa,EAAEC,MAAM,CAACC;CACtB;AAED,OAAO,MAAMC,qBAAqB,GAAG,YAA8D;EAAA,IAA7DC,4EAA+B,EAAE;EACtE,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC9B,OAAO;MACN,GAAGT,mBAAmB;MACtBC,KAAK,EAAEQ;KACP;;EAGF,IAAIA,KAAK,CAACP,OAAO,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACF,KAAK,CAACP,OAAO,CAAC,EAAE;IACnD,MAAM,IAAIU,KAAK,CAAC,gCAAgC,CAAC;;EAGlD,IAAIH,KAAK,CAACN,WAAW,IAAI,CAACO,KAAK,CAACC,OAAO,CAACF,KAAK,CAACN,WAAW,CAAC,EAAE;IAC3D,MAAM,IAAIS,KAAK,CAAC,oCAAoC,CAAC;;EAGtD,OAAO;IACN,GAAGZ,mBAAmB;IACtB,GAAGS,KAAK;IACRL,gBAAgB,EAAEL;GAClB;AACF,CAAC","names":["requestMethods","normalizeRequestMethod","input","includes","toUpperCase","retryMethods","retryStatusCodes","retryAfterStatusCodes","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","maxRetryAfter","Number","POSITIVE_INFINITY","normalizeRetryOptions","retry","Array","isArray","Error"],"sources":["/Users/devonmartin/Hacker Shit/VSCode Projects/Personal Projects/Portfolio Remade/client/node_modules/ky/source/utils/normalize.ts"],"sourcesContent":["import {requestMethods} from '../core/constants.js';\nimport type {HttpMethod} from '../types/options.js';\nimport type {RetryOptions} from '../types/retry.js';\n\nexport const normalizeRequestMethod = (input: string): string =>\n\trequestMethods.includes(input as HttpMethod) ? input.toUpperCase() : input;\n\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\n\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\n\nconst retryAfterStatusCodes = [413, 429, 503];\n\nconst defaultRetryOptions: Required<RetryOptions> = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes,\n\tmaxRetryAfter: Number.POSITIVE_INFINITY,\n};\n\nexport const normalizeRetryOptions = (retry: number | RetryOptions = {}): Required<RetryOptions> => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry,\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}