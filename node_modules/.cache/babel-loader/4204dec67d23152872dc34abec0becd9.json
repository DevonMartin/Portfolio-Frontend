{"ast":null,"code":"import { HTTPError } from '../errors/HTTPError.js';\nimport { TimeoutError } from '../errors/TimeoutError.js';\nimport { deepMerge, mergeHeaders } from '../utils/merge.js';\nimport { normalizeRequestMethod, normalizeRetryOptions } from '../utils/normalize.js';\nimport timeout from '../utils/timeout.js';\nimport delay from '../utils/delay.js';\nimport { maxSafeTimeout, responseTypes, stop, supportsAbortController, supportsFormData, supportsResponseStreams, supportsRequestStreams } from './constants.js';\nexport class Ky {\n  // eslint-disable-next-line complexity\n  constructor(input) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Object.defineProperty(this, \"request\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"abortController\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_retryCount\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_input\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._input = input;\n    this._options = {\n      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      credentials: this._input.credentials || 'same-origin',\n      ...options,\n      headers: mergeHeaders(this._input.headers, options.headers),\n      hooks: deepMerge({\n        beforeRequest: [],\n        beforeRetry: [],\n        beforeError: [],\n        afterResponse: []\n      }, options.hooks),\n      method: normalizeRequestMethod(options.method ?? this._input.method),\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      prefixUrl: String(options.prefixUrl || ''),\n      retry: normalizeRetryOptions(options.retry),\n      throwHttpErrors: options.throwHttpErrors !== false,\n      timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n      fetch: options.fetch ?? globalThis.fetch.bind(globalThis)\n    };\n    if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    }\n    if (this._options.prefixUrl && typeof this._input === 'string') {\n      if (this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n      if (!this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n      this._input = this._options.prefixUrl + this._input;\n    }\n    if (supportsAbortController) {\n      this.abortController = new globalThis.AbortController();\n      if (this._options.signal) {\n        const originalSignal = this._options.signal;\n        this._options.signal.addEventListener('abort', () => {\n          this.abortController.abort(originalSignal.reason);\n        });\n      }\n      this._options.signal = this.abortController.signal;\n    }\n    this.request = new globalThis.Request(this._input, this._options);\n    if (supportsRequestStreams) {\n      // @ts-expect-error - Types are outdated.\n      this.request.duplex = 'half';\n    }\n    if (this._options.searchParams) {\n      // eslint-disable-next-line unicorn/prevent-abbreviations\n      const textSearchParams = typeof this._options.searchParams === 'string' ? this._options.searchParams.replace(/^\\?/, '') : new URLSearchParams(this._options.searchParams).toString();\n      // eslint-disable-next-line unicorn/prevent-abbreviations\n      const searchParams = '?' + textSearchParams;\n      const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n      // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n      if ((supportsFormData && this._options.body instanceof globalThis.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n        this.request.headers.delete('content-type');\n      }\n      this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n    }\n    if (this._options.json !== undefined) {\n      this._options.body = JSON.stringify(this._options.json);\n      this.request.headers.set('content-type', this._options.headers.get('content-type') ?? 'application/json');\n      this.request = new globalThis.Request(this.request, {\n        body: this._options.body\n      });\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  static create(input, options) {\n    const ky = new Ky(input, options);\n    const fn = async () => {\n      if (ky._options.timeout > maxSafeTimeout) {\n        throw new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n      }\n      // Delay the fetch so that body method shortcuts can set the Accept header\n      await Promise.resolve();\n      let response = await ky._fetch();\n      for (const hook of ky._options.hooks.afterResponse) {\n        // eslint-disable-next-line no-await-in-loop\n        const modifiedResponse = await hook(ky.request, ky._options, ky._decorateResponse(response.clone()));\n        if (modifiedResponse instanceof globalThis.Response) {\n          response = modifiedResponse;\n        }\n      }\n      ky._decorateResponse(response);\n      if (!response.ok && ky._options.throwHttpErrors) {\n        let error = new HTTPError(response, ky.request, ky._options);\n        for (const hook of ky._options.hooks.beforeError) {\n          // eslint-disable-next-line no-await-in-loop\n          error = await hook(error);\n        }\n        throw error;\n      }\n      // If `onDownloadProgress` is passed, it uses the stream API internally\n      /* istanbul ignore next */\n      if (ky._options.onDownloadProgress) {\n        if (typeof ky._options.onDownloadProgress !== 'function') {\n          throw new TypeError('The `onDownloadProgress` option must be a function');\n        }\n        if (!supportsResponseStreams) {\n          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n        }\n        return ky._stream(response.clone(), ky._options.onDownloadProgress);\n      }\n      return response;\n    };\n    const isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n    const result = isRetriableMethod ? ky._retry(fn) : fn();\n    for (const [type, mimeType] of Object.entries(responseTypes)) {\n      result[type] = async () => {\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        ky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n        const awaitedResult = await result;\n        const response = awaitedResult.clone();\n        if (type === 'json') {\n          if (response.status === 204) {\n            return '';\n          }\n          const arrayBuffer = await response.clone().arrayBuffer();\n          const responseSize = arrayBuffer.byteLength;\n          if (responseSize === 0) {\n            return '';\n          }\n          if (options.parseJson) {\n            return options.parseJson(await response.text());\n          }\n        }\n        return response[type]();\n      };\n    }\n    return result;\n  }\n  _calculateRetryDelay(error) {\n    this._retryCount++;\n    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n      if (error instanceof HTTPError) {\n        if (!this._options.retry.statusCodes.includes(error.response.status)) {\n          return 0;\n        }\n        const retryAfter = error.response.headers.get('Retry-After');\n        if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n          let after = Number(retryAfter);\n          if (Number.isNaN(after)) {\n            after = Date.parse(retryAfter) - Date.now();\n          } else {\n            after *= 1000;\n          }\n          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n            return 0;\n          }\n          return after;\n        }\n        if (error.response.status === 413) {\n          return 0;\n        }\n      }\n      const BACKOFF_FACTOR = 0.3;\n      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;\n    }\n    return 0;\n  }\n  _decorateResponse(response) {\n    if (this._options.parseJson) {\n      response.json = async () => this._options.parseJson(await response.text());\n    }\n    return response;\n  }\n  async _retry(fn) {\n    try {\n      return await fn();\n      // eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n    } catch (error) {\n      const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n      if (ms !== 0 && this._retryCount > 0) {\n        await delay(ms, {\n          signal: this._options.signal\n        });\n        for (const hook of this._options.hooks.beforeRetry) {\n          // eslint-disable-next-line no-await-in-loop\n          const hookResult = await hook({\n            request: this.request,\n            options: this._options,\n            error: error,\n            retryCount: this._retryCount\n          });\n          // If `stop` is returned from the hook, the retry process is stopped\n          if (hookResult === stop) {\n            return;\n          }\n        }\n        return this._retry(fn);\n      }\n      throw error;\n    }\n  }\n  async _fetch() {\n    for (const hook of this._options.hooks.beforeRequest) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await hook(this.request, this._options);\n      if (result instanceof Request) {\n        this.request = result;\n        break;\n      }\n      if (result instanceof Response) {\n        return result;\n      }\n    }\n    if (this._options.timeout === false) {\n      return this._options.fetch(this.request.clone());\n    }\n    return timeout(this.request.clone(), this.abortController, this._options);\n  }\n  /* istanbul ignore next */\n  _stream(response, onDownloadProgress) {\n    const totalBytes = Number(response.headers.get('content-length')) || 0;\n    let transferredBytes = 0;\n    if (response.status === 204) {\n      if (onDownloadProgress) {\n        onDownloadProgress({\n          percent: 1,\n          totalBytes,\n          transferredBytes\n        }, new Uint8Array());\n      }\n      return new globalThis.Response(null, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: response.headers\n      });\n    }\n    return new globalThis.Response(new globalThis.ReadableStream({\n      async start(controller) {\n        const reader = response.body.getReader();\n        if (onDownloadProgress) {\n          onDownloadProgress({\n            percent: 0,\n            transferredBytes: 0,\n            totalBytes\n          }, new Uint8Array());\n        }\n        async function read() {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) {\n            controller.close();\n            return;\n          }\n          if (onDownloadProgress) {\n            transferredBytes += value.byteLength;\n            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n            onDownloadProgress({\n              percent,\n              transferredBytes,\n              totalBytes\n            }, value);\n          }\n          controller.enqueue(value);\n          await read();\n        }\n        await read();\n      }\n    }), {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HTTPError","TimeoutError","deepMerge","mergeHeaders","normalizeRequestMethod","normalizeRetryOptions","timeout","delay","maxSafeTimeout","responseTypes","stop","supportsAbortController","supportsFormData","supportsResponseStreams","supportsRequestStreams","Ky","constructor","input","options","Object","_input","_options","credentials","headers","hooks","beforeRequest","beforeRetry","beforeError","afterResponse","method","prefixUrl","String","retry","throwHttpErrors","fetch","globalThis","bind","URL","Request","TypeError","startsWith","Error","endsWith","abortController","AbortController","signal","originalSignal","addEventListener","abort","reason","request","duplex","searchParams","textSearchParams","replace","URLSearchParams","toString","url","body","FormData","delete","json","undefined","JSON","stringify","set","get","create","ky","fn","RangeError","Promise","resolve","response","_fetch","hook","modifiedResponse","_decorateResponse","clone","Response","ok","error","onDownloadProgress","_stream","isRetriableMethod","methods","includes","toLowerCase","result","_retry","type","mimeType","entries","awaitedResult","status","arrayBuffer","responseSize","byteLength","parseJson","text","_calculateRetryDelay","_retryCount","limit","statusCodes","retryAfter","afterStatusCodes","after","Number","isNaN","Date","parse","now","maxRetryAfter","BACKOFF_FACTOR","ms","Math","min","hookResult","retryCount","totalBytes","transferredBytes","percent","Uint8Array","statusText","ReadableStream","start","controller","reader","getReader","read","done","value","close","enqueue"],"sources":["/Users/devonmartin/Hacker Shit/VSCode Projects/Personal Projects/Portfolio Remade/client/node_modules/ky/source/core/Ky.ts"],"sourcesContent":["import {HTTPError} from '../errors/HTTPError.js';\nimport {TimeoutError} from '../errors/TimeoutError.js';\nimport type {Hooks} from '../types/hooks.js';\nimport type {Input, InternalOptions, NormalizedOptions, Options, SearchParamsInit} from '../types/options.js';\nimport {ResponsePromise} from '../types/ResponsePromise.js';\nimport {deepMerge, mergeHeaders} from '../utils/merge.js';\nimport {normalizeRequestMethod, normalizeRetryOptions} from '../utils/normalize.js';\nimport timeout, {TimeoutOptions} from '../utils/timeout.js';\nimport delay from '../utils/delay.js';\nimport {ObjectEntries} from '../utils/types.js';\nimport {\n\tmaxSafeTimeout,\n\tresponseTypes,\n\tstop,\n\tsupportsAbortController,\n\tsupportsFormData,\n\tsupportsResponseStreams,\n\tsupportsRequestStreams,\n} from './constants.js';\n\nexport class Ky {\n\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\tstatic create(input: Input, options: Options): ResponsePromise {\n\t\tconst ky = new Ky(input, options);\n\n\t\tconst fn = async (): Promise<Response> => {\n\t\t\tif (ky._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\t// Delay the fetch so that body method shortcuts can set the Accept header\n\t\t\tawait Promise.resolve();\n\t\t\tlet response = await ky._fetch();\n\n\t\t\tfor (const hook of ky._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tky.request,\n\t\t\t\t\tky._options as NormalizedOptions,\n\t\t\t\t\tky._decorateResponse(response.clone()),\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globalThis.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tky._decorateResponse(response);\n\n\t\t\tif (!response.ok && ky._options.throwHttpErrors) {\n\t\t\t\tlet error = new HTTPError(response, ky.request, (ky._options as unknown) as NormalizedOptions);\n\n\t\t\t\tfor (const hook of ky._options.hooks.beforeError) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\terror = await hook(error);\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (ky._options.onDownloadProgress) {\n\t\t\t\tif (typeof ky._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsResponseStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn ky._stream(response.clone(), ky._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\t\tconst result = (isRetriableMethod ? ky._retry(fn) : fn()) as ResponsePromise;\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes) as ObjectEntries<typeof responseTypes>) {\n\t\t\tresult[type] = async () => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\t\tky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst awaitedResult = await result;\n\t\t\t\tconst response = awaitedResult.clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst arrayBuffer = await response.clone().arrayBuffer();\n\t\t\t\t\tconst responseSize = arrayBuffer.byteLength;\n\t\t\t\t\tif (responseSize === 0) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic request: Request;\n\tprotected abortController?: AbortController;\n\tprotected _retryCount = 0;\n\tprotected _input: Input;\n\tprotected _options: InternalOptions;\n\n\t// eslint-disable-next-line complexity\n\tconstructor(input: Input, options: Options = {}) {\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: (this._input as Request).credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders((this._input as Request).headers, options.headers),\n\t\t\thooks: deepMerge<Required<Hooks>>(\n\t\t\t\t{\n\t\t\t\t\tbeforeRequest: [],\n\t\t\t\t\tbeforeRetry: [],\n\t\t\t\t\tbeforeError: [],\n\t\t\t\t\tafterResponse: [],\n\t\t\t\t},\n\t\t\t\toptions.hooks,\n\t\t\t),\n\t\t\tmethod: normalizeRequestMethod(options.method ?? (this._input as Request).method),\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10_000 : options.timeout,\n\t\t\tfetch: options.fetch ?? globalThis.fetch.bind(globalThis),\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globalThis.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tconst originalSignal = this._options.signal;\n\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController!.abort(originalSignal.reason);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis.request = new globalThis.Request(this._input as RequestInfo, this._options as RequestInit);\n\n\t\tif (supportsRequestStreams) {\n\t\t\t// @ts-expect-error - Types are outdated.\n\t\t\tthis.request.duplex = 'half';\n\t\t}\n\n\t\tif (this._options.searchParams) {\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst textSearchParams = typeof this._options.searchParams === 'string'\n\t\t\t\t? this._options.searchParams.replace(/^\\?/, '')\n\t\t\t\t: new URLSearchParams(this._options.searchParams as unknown as SearchParamsInit).toString();\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst searchParams = '?' + textSearchParams;\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (\n\t\t\t\t((supportsFormData && this._options.body instanceof globalThis.FormData)\n\t\t\t\t\t|| this._options.body instanceof URLSearchParams) && !(this._options.headers && (this._options.headers as Record<string, string>)['content-type'])\n\t\t\t) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\tthis.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options as RequestInit);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', this._options.headers.get('content-type') ?? 'application/json');\n\t\t\tthis.request = new globalThis.Request(this.request, {body: this._options.body});\n\t\t}\n\t}\n\n\tprotected _calculateRetryDelay(error: unknown) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprotected _decorateResponse(response: Response): Response {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => this._options.parseJson!(await response.text());\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tprotected async _retry<T extends (...args: any) => Promise<any>>(fn: T): Promise<ReturnType<T> | void> {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms, {signal: this._options.signal});\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: (this._options as unknown) as NormalizedOptions,\n\t\t\t\t\t\terror: error as Error,\n\t\t\t\t\t\tretryCount: this._retryCount,\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async _fetch(): Promise<Response> {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, (this._options as unknown) as NormalizedOptions);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options as TimeoutOptions);\n\t}\n\n\t/* istanbul ignore next */\n\tprotected _stream(response: Response, onDownloadProgress: Options['onDownloadProgress']) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\tif (response.status === 204) {\n\t\t\tif (onDownloadProgress) {\n\t\t\t\tonDownloadProgress({percent: 1, totalBytes, transferredBytes}, new Uint8Array());\n\t\t\t}\n\n\t\t\treturn new globalThis.Response(\n\t\t\t\tnull,\n\t\t\t\t{\n\t\t\t\t\tstatus: response.status,\n\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\theaders: response.headers,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn new globalThis.Response(\n\t\t\tnew globalThis.ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst reader = response.body!.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tawait read();\n\t\t\t\t\t}\n\n\t\t\t\t\tawait read();\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{\n\t\t\t\tstatus: response.status,\n\t\t\t\tstatusText: response.statusText,\n\t\t\t\theaders: response.headers,\n\t\t\t},\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}