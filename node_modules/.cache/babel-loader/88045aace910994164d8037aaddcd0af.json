{"ast":null,"code":"import { isObject } from './is.js';\nexport const validateAndMerge = function () {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  for (const source of sources) {\n    if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n      throw new TypeError('The `options` argument must be an object');\n    }\n  }\n  return deepMerge({}, ...sources);\n};\nexport const mergeHeaders = function () {\n  let source1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let source2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const result = new globalThis.Headers(source1);\n  const isHeadersInstance = source2 instanceof globalThis.Headers;\n  const source = new globalThis.Headers(source2);\n  for (const [key, value] of source.entries()) {\n    if (isHeadersInstance && value === 'undefined' || value === undefined) {\n      result.delete(key);\n    } else {\n      result.set(key, value);\n    }\n  }\n  return result;\n};\n// TODO: Make this strongly-typed (no `any`).\nexport const deepMerge = function () {\n  let returnValue = {};\n  let headers = {};\n  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    sources[_key2] = arguments[_key2];\n  }\n  for (const source of sources) {\n    if (Array.isArray(source)) {\n      if (!Array.isArray(returnValue)) {\n        returnValue = [];\n      }\n      returnValue = [...returnValue, ...source];\n    } else if (isObject(source)) {\n      for (let [key, value] of Object.entries(source)) {\n        if (isObject(value) && key in returnValue) {\n          value = deepMerge(returnValue[key], value);\n        }\n        returnValue = {\n          ...returnValue,\n          [key]: value\n        };\n      }\n      if (isObject(source.headers)) {\n        headers = mergeHeaders(headers, source.headers);\n        returnValue.headers = headers;\n      }\n    }\n  }\n  return returnValue;\n};","map":{"version":3,"mappings":"AACA,SAAQA,QAAQ,QAAO,SAAS;AAEhC,OAAO,MAAMC,gBAAgB,GAAG,YAAsE;EAAA,kCAAlEC,OAA4C;IAA5CA,OAA4C;EAAA;EAC/E,KAAK,MAAMC,MAAM,IAAID,OAAO,EAAE;IAC7B,IAAI,CAAC,CAACF,QAAQ,CAACG,MAAM,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,KAAK,OAAOA,MAAM,KAAK,WAAW,EAAE;MAClF,MAAM,IAAIG,SAAS,CAAC,0CAA0C,CAAC;;;EAIjE,OAAOC,SAAS,CAAC,EAAE,EAAE,GAAGL,OAAO,CAAC;AACjC,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,YAA6D;EAAA,IAA5DC,8EAAyB,EAAE;EAAA,IAAEC,8EAAyB,EAAE;EACpF,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAACC,OAAO,CAACJ,OAAsB,CAAC;EAC7D,MAAMK,iBAAiB,GAAGJ,OAAO,YAAYE,UAAU,CAACC,OAAO;EAC/D,MAAMV,MAAM,GAAG,IAAIS,UAAU,CAACC,OAAO,CAACH,OAAsB,CAAC;EAE7D,KAAK,MAAM,CAACK,GAAG,EAAEC,KAAK,CAAC,IAAIb,MAAM,CAACc,OAAO,EAAE,EAAE;IAC5C,IAAKH,iBAAiB,IAAIE,KAAK,KAAK,WAAW,IAAKA,KAAK,KAAKE,SAAS,EAAE;MACxEP,MAAM,CAACQ,MAAM,CAACJ,GAAG,CAAC;KAClB,MAAM;MACNJ,MAAM,CAACS,GAAG,CAACL,GAAG,EAAEC,KAAK,CAAC;;;EAIxB,OAAOL,MAAM;AACd,CAAC;AAED;AACA,OAAO,MAAMJ,SAAS,GAAG,YAAoD;EAC5E,IAAIc,WAAW,GAAQ,EAAE;EACzB,IAAIC,OAAO,GAAG,EAAE;EAAC,mCAFcpB,OAAsC;IAAtCA,OAAsC;EAAA;EAIrE,KAAK,MAAMC,MAAM,IAAID,OAAO,EAAE;IAC7B,IAAIE,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;MAC1B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACgB,WAAW,CAAC,EAAE;QAChCA,WAAW,GAAG,EAAE;;MAGjBA,WAAW,GAAG,CAAC,GAAGA,WAAW,EAAE,GAAGlB,MAAM,CAAC;KACzC,MAAM,IAAIH,QAAQ,CAACG,MAAM,CAAC,EAAE;MAC5B,KAAK,IAAI,CAACY,GAAG,EAAEC,KAAK,CAAC,IAAIO,MAAM,CAACN,OAAO,CAACd,MAAM,CAAC,EAAE;QAChD,IAAIH,QAAQ,CAACgB,KAAK,CAAC,IAAID,GAAG,IAAIM,WAAW,EAAE;UAC1CL,KAAK,GAAGT,SAAS,CAACc,WAAW,CAACN,GAAG,CAAC,EAAEC,KAAK,CAAC;;QAG3CK,WAAW,GAAG;UAAC,GAAGA,WAAW;UAAE,CAACN,GAAG,GAAGC;QAAK,CAAC;;MAG7C,IAAIhB,QAAQ,CAAEG,MAAc,CAACmB,OAAO,CAAC,EAAE;QACtCA,OAAO,GAAGd,YAAY,CAACc,OAAO,EAAGnB,MAAc,CAACmB,OAAO,CAAC;QACxDD,WAAW,CAACC,OAAO,GAAGA,OAAO;;;;EAKhC,OAAOD,WAAW;AACnB,CAAC","names":["isObject","validateAndMerge","sources","source","Array","isArray","TypeError","deepMerge","mergeHeaders","source1","source2","result","globalThis","Headers","isHeadersInstance","key","value","entries","undefined","delete","set","returnValue","headers","Object"],"sources":["/Users/devonmartin/Hacker Shit/VSCode Projects/Personal Projects/Portfolio Remade/client/node_modules/ky/source/utils/merge.ts"],"sourcesContent":["import type {KyHeadersInit, Options} from '../types/options.js';\nimport {isObject} from './is.js';\n\nexport const validateAndMerge = (...sources: Array<Partial<Options> | undefined>): Partial<Options> => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nexport const mergeHeaders = (source1: KyHeadersInit = {}, source2: KyHeadersInit = {}) => {\n\tconst result = new globalThis.Headers(source1 as HeadersInit);\n\tconst isHeadersInstance = source2 instanceof globalThis.Headers;\n\tconst source = new globalThis.Headers(source2 as HeadersInit);\n\n\tfor (const [key, value] of source.entries()) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n// TODO: Make this strongly-typed (no `any`).\nexport const deepMerge = <T>(...sources: Array<Partial<T> | undefined>): T => {\n\tlet returnValue: any = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!Array.isArray(returnValue)) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && key in returnValue) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject((source as any).headers)) {\n\t\t\t\theaders = mergeHeaders(headers, (source as any).headers);\n\t\t\t\treturnValue.headers = headers;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n"]},"metadata":{},"sourceType":"module"}